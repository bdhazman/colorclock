{"version":3,"sources":["App.js","serviceWorker.js","index.js","imgs/play.svg","imgs/pause.svg"],"names":["calculateHexTime","date","Date","seconds","getSeconds","getMilliseconds","minutes","getMinutes","hours","getHours","hexHours","parseInt","toString","hexMinutes","hexSeconds","length","calculateInverseHexTime","formattedTime","ClockApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","paused","state","toggleTime","displayTime","time","hex","inverseHex","_this2","timerID","setInterval","tick","hexCode","clockStyle","fontFamily","fontSize","width","textAlign","transition","color","react_default","a","createElement","style","height","display","flexWrap","justifyContent","alignItems","background","onClick","alt","src","play","pause","opacity","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wQAUA,SAASA,IACP,IAAIC,EAAO,IAAIC,KAEXC,EAAUF,EAAKG,aAAeH,EAAKI,kBAAkB,IACrDC,EAAUL,EAAKM,aAAeJ,EAAQ,GACtCK,EAAQP,EAAKQ,WAAaH,EAAQ,GAElCI,EAAWC,SAAUH,EAAM,GAAM,KAAOI,SAAS,IACjDC,EAAaF,SAAUL,EAAQ,GAAM,KAAOM,SAAS,IACrDE,EAAaH,SAAUR,EAAQ,GAAM,KAAOS,SAAS,IAYzD,OAVwB,IAApBF,EAASK,SACXL,EAAW,IAAMA,GAEO,IAAtBG,EAAWE,SACbF,EAAa,IAAMA,GAEK,IAAtBC,EAAWC,SACbD,EAAa,IAAMA,GAGd,IAAMJ,EAAWG,EAAaC,EAUvC,SAASE,IACP,IAAIf,EAAO,IAAIC,KAEXC,EAAUF,EAAKG,aAAeH,EAAKI,kBAAkB,IACrDC,EAAUL,EAAKM,aAAeJ,EAAQ,GACtCK,EAAQP,EAAKQ,WAAaH,EAAQ,GAElCI,GAAY,IAAMC,SAAUH,EAAM,GAAM,MAAQI,SAAS,IACzDC,GAAc,IAAKF,SAAUL,EAAQ,GAAM,MAAQM,SAAS,IAC5DE,GAAc,IAAKH,SAAUR,EAAQ,GAAM,MAAQS,SAAS,IAYhE,OAVwB,IAApBF,EAASK,SACXL,EAAW,IAAMA,GAEO,IAAtBG,EAAWE,SACbF,EAAa,IAAMA,GAEK,IAAtBC,EAAWC,SACbD,EAAa,IAAMA,GAGd,IAAMJ,EAAWG,EAAaC,EAGvC,SAASG,IACP,IAAIhB,EAAO,IAAIC,KACf,OAAOD,EAAKQ,WAAa,IAAMR,EAAKM,aAAe,IAAMN,EAAKG,iBAmFjDc,cA/Eb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgCRQ,YAAc,WACZP,EAAKQ,SAAS,CACZC,QAAST,EAAKU,MAAMD,UAnCNT,EAuClBW,WAAa,WACXX,EAAKQ,SAAS,CACZI,aAAcZ,EAAKU,MAAME,eAvC3BZ,EAAKU,MAAQ,CACXD,QAAQ,EACRI,KAAMhB,IACNe,aAAa,EACbE,IAAKlC,IACLmC,WAAYnB,KAPEI,mFAWE,IAAAgB,EAAAb,KAClBA,KAAKc,QAAUC,YACb,kBAAMF,EAAKG,QACX,oCAUF,GALGhB,KAAKO,MAAME,aACZT,KAAKK,SAAS,CACZK,KAAMhB,OAGNM,KAAKO,MAAMD,OAAO,CACpB,IAAIW,EAAUxC,IACduB,KAAKK,SAAS,CACZM,IAAKM,EACLL,WAAYnB,wCAkBhB,IAAIyB,EAAa,CACfC,WAAY,SACZC,SAAU,OACVC,MAAO,QACPC,UAAW,SACXC,WAAY,cACZC,MAAOxB,KAAKO,MAAMK,YASpB,OACEa,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CACVC,OAAQ,QACRR,MAAO,QACPS,QAAS,OACTC,SAAU,OACVC,eAAgB,SAChBC,WAAY,SACZV,WAAY,cACZW,WAAYlC,KAAKO,MAAMI,MAEvBc,EAAAC,EAAAC,cAAA,OAAKC,MAAOV,EAAYiB,QAASnC,KAAKQ,YAAaR,KAAKO,MAAME,YAAcT,KAAKO,MAAMG,KAAOV,KAAKO,MAAMI,KACzGc,EAAAC,EAAAC,cAAA,OAAKQ,QAASnC,KAAKI,YAAagC,IAAKpC,KAAKO,MAAMD,OAAS,OAAS,QAAS+B,IAAKrC,KAAKO,MAAMD,OAASgC,IAAOC,IAAOX,MAlBpG,CAChBC,OAAQ,MACRR,MAAO,MACPmB,QAAS,gBA3DQC,aC1DHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.cc39a323.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport play from \"./imgs/play.svg\"\nimport pause from \"./imgs/pause.svg\"\n\n/**\n * calculateHexTime - calculates the hex code that correlates\n * to the current time.\n *\n * @return {string}  the hexCode relating to the current time\n */\nfunction calculateHexTime(){\n  var date = new Date()\n\n  var seconds = date.getSeconds() + date.getMilliseconds()/1000;\n  var minutes = date.getMinutes() + seconds/60;\n  var hours = date.getHours() + minutes/60;\n\n  var hexHours = parseInt((hours/24.0)*256.0).toString(16);\n  var hexMinutes = parseInt((minutes/60.0)*256.0).toString(16);\n  var hexSeconds = parseInt((seconds/60.0)*256.0).toString(16);\n\n  if (hexHours.length === 1){\n    hexHours = \"0\" + hexHours;\n  }\n  if (hexMinutes.length === 1){\n    hexMinutes = \"0\" + hexMinutes;\n  }\n  if (hexSeconds.length === 1){\n    hexSeconds = \"0\" + hexSeconds;\n  }\n\n  return \"#\" + hexHours + hexMinutes + hexSeconds;\n}\n\n/**\n * calculateInverseHexTime - calculates the inverse hex code that correlates\n * to the current time. The inverse color is used for the text so it is visible\n * and correlates well to the current background time.\n *\n * @return {string}  the inverse hexCode relating to the current time\n */\nfunction calculateInverseHexTime(){\n  var date = new Date()\n\n  var seconds = date.getSeconds() + date.getMilliseconds()/1000;\n  var minutes = date.getMinutes() + seconds/60;\n  var hours = date.getHours() + minutes/60;\n\n  var hexHours = (256 - parseInt((hours/24.0)*256.0)).toString(16);\n  var hexMinutes = (256- parseInt((minutes/60.0)*256.0)).toString(16);\n  var hexSeconds = (256- parseInt((seconds/60.0)*256.0)).toString(16);\n\n  if (hexHours.length === 1){\n    hexHours = \"0\" + hexHours;\n  }\n  if (hexMinutes.length === 1){\n    hexMinutes = \"0\" + hexMinutes;\n  }\n  if (hexSeconds.length === 1){\n    hexSeconds = \"0\" + hexSeconds;\n  }\n\n  return \"#\" + hexHours + hexMinutes + hexSeconds;\n}\n\nfunction formattedTime(){\n  var date = new Date();\n  return date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds()\n}\n\nclass ClockApp extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      paused: false,\n      time: formattedTime(),\n      displayTime: false,\n      hex: calculateHexTime(),\n      inverseHex: calculateInverseHexTime()\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      500\n    );\n  }\n\n  tick() {\n    if(this.state.displayTime){\n      this.setState({\n        time: formattedTime()\n      })\n    }\n    if(!this.state.paused){\n      var hexCode = calculateHexTime();\n      this.setState({\n        hex: hexCode,\n        inverseHex: calculateInverseHexTime()\n      });\n    }\n  }\n\n  handleClick = () => {\n    this.setState({\n      paused: !this.state.paused\n    });\n  }\n\n  toggleTime = () => {\n    this.setState({\n      displayTime: !this.state.displayTime\n    })\n  }\n\n  render(){\n    var clockStyle = {\n      fontFamily: 'Roboto',\n      fontSize: '18vw',\n      width: '100vw',\n      textAlign: 'center',\n      transition: '.5s ease-in',\n      color: this.state.inverseHex\n    }\n\n    var buttonStyle = {\n      height: '5vw',\n      width: '5vw',\n      opacity: '.6'\n    }\n\n    return(\n      <div style={{\n        height: '100vh',\n        width: '100vw',\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignItems: 'center',\n        transition: '.5s ease-in',\n        background: this.state.hex}}>\n\n        <div style={clockStyle} onClick={this.toggleTime}>{this.state.displayTime ? this.state.time : this.state.hex}</div>\n        <img onClick={this.handleClick} alt={this.state.paused ? \"play\" : \"pause\"} src={this.state.paused ? play : pause} style={buttonStyle}/>\n      </div>\n    );\n  }\n}\n\nexport default ClockApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/play.0afc49f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/pause.cd7da876.svg\";"],"sourceRoot":""}